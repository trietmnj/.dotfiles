-- -- lua/modules/lsp.lua
--
-- -- =====================================================================
-- --  Neovim LSP + Tools Config (organized)
-- --  Sections:
-- --   1) Globals & Utilities
-- --   2) Plugin Bootstraps (require)
-- --   3) UI / Diagnostics / Trouble keymaps
-- --   4) LSP: on_attach, flags, servers
-- --   5) Mason & Tooling
-- --   6) Commenting (ts_context_commentstring + mini.comment)
-- --   7) Autocommands (TeX wrap)
-- -- =====================================================================
--
-- -- ---------------------------------------------------------------------
-- -- 1) Globals & Utilities
-- -- ---------------------------------------------------------------------
-- vim.g.coq_settings = { auto_start = "shut-up" } -- COQ: quiet autostart
-- vim.lsp.log.set_level("error")                  -- reduce LSP log noise
-- local lsp_flags = { debounce_text_changes = 150 }
--
-- -- Small helper for local buffer keymaps
-- local function bmap(buf, mode, lhs, rhs, opts)
--     opts = opts or {}
--     opts.buffer = buf
--     opts.silent = opts.silent ~= false
--     opts.noremap = opts.noremap ~= false
--     vim.keymap.set(mode, lhs, rhs, opts)
-- end
--
-- -- ---------------------------------------------------------------------
-- -- 2) Plugin Bootstraps
-- -- ---------------------------------------------------------------------
-- local nvim_lsp = require("lspconfig")
-- local coq      = require("coq") -- completion front-end
--
-- -- ---------------------------------------------------------------------
-- -- 4) LSP: on_attach, flags, servers
-- -- ---------------------------------------------------------------------
-- local on_attach = function(client, bufnr)
--     -- completion
--     vim.bo[bufnr].omnifunc = "v:lua.vim.lsp.omnifunc"
--
--     -- Buffer-local LSP keymaps
--     bmap(bufnr, "n", "ga", vim.lsp.buf.code_action)
--     bmap(bufnr, "n", "gd", vim.lsp.buf.definition)
--     bmap(bufnr, "n", "gD", vim.lsp.buf.declaration)
--     bmap(bufnr, "n", "gr", vim.lsp.buf.references)
--     bmap(bufnr, "n", "gi", vim.lsp.buf.implementation)
--     bmap(bufnr, "n", "K", vim.lsp.buf.hover)
--     bmap(bufnr, "n", "<leader>rn", vim.lsp.buf.rename)
--     -- bmap(bufnr, "n", "<C-k>", vim.lsp.buf.signature_help)
--
--     -- Optional: format on save per-buffer
--     -- vim.api.nvim_create_autocmd("BufWritePre", {
--     --   buffer = bufnr,
--     --   callback = function() vim.lsp.buf.format({ timeout_ms = 100 }) end,
--     -- })
-- end
--
-- -- List of servers + per-server overrides
-- local servers = {
--     "jedi_language_server",
--     "pyright",
--     "rust_analyzer",
--     "ts_ls",
--     "vimls",
--     "jsonls",
--     "gopls",
--     "omnisharp",
--     "csharp_ls",
--     "lua_ls",
--     "r_language_server",
--     "texlab",
--     --     -- 'svelte',
--     --     -- 'tailwindcss',
--     --     -- 'html',
--     --     -- 'dockerls',
--     --     -- 'lemminx',
--     --     -- 'sumneko_lua',
--     --     -- 'cssls',
--     --     -- 'solargraph',
--     --     -- 'ltex',
-- }
--
-- for _, lsp in ipairs(servers) do
--     if lsp == "gopls" then
--         nvim_lsp.gopls.setup(coq.lsp_ensure_capabilities({
--             cmd = { "gopls", "serve" },
--             filetypes = { "go", "gomod" },
--             settings = {
--                 gopls = {
--                     experimentalPostfixCompletions = true,
--                     analyses = { unusedparams = true, shadow = true },
--                     staticcheck = true,
--                 },
--             },
--             on_attach = on_attach,
--             flags = lsp_flags,
--         }))
--     elseif lsp == "rust_analyzer" then
--         nvim_lsp.rust_analyzer.setup(coq.lsp_ensure_capabilities({
--             on_attach = on_attach,
--             flags = lsp_flags,
--             settings = {
--                 ["rust-analyzer"] = {
--                     assist = { importGranularity = "module", importPrefix = "self" },
--                     cargo = { loadOutDirsFromCheck = true },
--                     procMacro = { enable = true },
--                 },
--             },
--         }))
--     elseif lsp == "pyright" then
--         nvim_lsp.pyright.setup(coq.lsp_ensure_capabilities({
--             on_attach = on_attach,
--             flags = lsp_flags,
--             settings = {
--                 python = {
--                     analysis = {
--                         autoSearchPaths = true,
--                         useLibraryCodeForTypes = true,
--                     },
--                     -- Tip: usually let pyright auto-detect venv; set only if you need a fixed interpreter:
--                     pythonPath = "/home/linuxbrew/.linuxbrew/bin/python3.11",
--                 },
--             },
--         }))
--     elseif lsp == "lua_ls" then
--         nvim_lsp.lua_ls.setup(coq.lsp_ensure_capabilities({
--             on_attach = on_attach,
--             flags = lsp_flags,
--             settings = {
--                 Lua = {
--                     runtime = { version = "LuaJIT" },
--                     diagnostics = { globals = { "vim" } },
--                     workspace = { library = vim.api.nvim_get_runtime_file("", true) },
--                     telemetry = { enable = false },
--                 },
--             },
--         }))
--     elseif lsp == "r_language_server" then
--         nvim_lsp.r_language_server.setup(coq.lsp_ensure_capabilities({
--             on_attach = on_attach,
--             flags = lsp_flags,
--             filetypes = { "r", "rmd", "quarto", "rnoweb" },
--             settings = { r = { lsp = { diagnostics = true } } },
--             -- languageserver must be installed in R
--         }))
--     else
--         nvim_lsp[lsp].setup(coq.lsp_ensure_capabilities({
--             on_attach = on_attach,
--             flags = lsp_flags,
--         }))
--     end
-- end
--
-- -- -- ---------------------------------------------------------------------
-- -- -- 5) Mason & Tooling
-- -- -- ---------------------------------------------------------------------
-- -- require("mason").setup({
-- --     ui = {
-- --         icons = {
-- --             package_installed = "✓",
-- --             package_pending = "➜",
-- --             package_uninstalled = "✗",
-- --         },
-- --     },
-- -- })
-- --
-- -- require("mason-tool-installer").setup({
-- --     ensure_installed = {
-- --         { "bash-language-server", auto_update = true },
-- --         "pyright",
-- --         "lua-language-server",
-- --         "vim-language-server",
-- --         "stylua",
-- --         "shellcheck",
-- --         "editorconfig-checker",
-- --         "shfmt",
-- --         "vint",
-- --         "r-languageserver",
-- --         "texlab",
-- --     },
-- --     auto_update = true,
-- --     run_on_start = true,
-- --     start_delay = 3000,
-- -- })
-- --
-- -- ---------------------------------------------------------------------
-- -- 6) Commenting / Commentstring
-- -- ---------------------------------------------------------------------
-- -- require("ts_context_commentstring").setup({ enable_autocmd = false })
-- -- require("mini.comment").setup({
-- --     options = {
-- --         custom_commentstring = function()
-- --             return require("ts_context_commentstring").calculate_commentstring()
-- --                 or vim.bo.commentstring
-- --         end,
-- --     },
-- -- })
-- --
-- -- ---------------------------------------------------------------------
-- -- 7) Autocommands
-- -- ---------------------------------------------------------------------
-- local wrapGrp = vim.api.nvim_create_augroup("WrapLineInTeXFile", { clear = true })
-- vim.api.nvim_create_autocmd("FileType", {
--     group = wrapGrp,
--     pattern = "tex",
--     callback = function() vim.opt_local.wrap = true end,
-- })

-- lua/modules/lsp.lua
-- All LSP setup is now handled in: lua/plugins/lsp.lua
-- This module is kept for light editor glue only.

-- local M = {}
--
-- function M.setup()
--     -- TeX: wrap lines in TeX buffers
--     local grp = vim.api.nvim_create_augroup("WrapLineInTeXFile", { clear = true })
--     vim.api.nvim_create_autocmd("FileType", {
--         group = grp,
--         pattern = "tex",
--         callback = function()
--             vim.opt_local.wrap = true
--         end,
--     })
-- end
--
-- return M
